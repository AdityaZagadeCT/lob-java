/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lob.model.PostcardDetailsWritable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
/**
 * PostcardRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PostcardRequest {
  public static final String SERIALIZED_NAME_FROM = "from";

  @SerializedName(SERIALIZED_NAME_FROM)
  
  private String from;
  public  String getFrom() {
    return from;
  }
  

  public void setFrom(String from) {
    
    
    this.from = from;
  }
  
  
  public void setFrom(AddressEditable from) {
    Gson gson = new Gson();
    
    this.from = gson.toJson(from);
  }
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";

  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  

  private String description;
  /**
  * An internal description that identifies this resource. Must be no longer than 255 characters. 
  * @return description
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "An internal description that identifies this resource. Must be no longer than 255 characters. ")
  
  public String getDescription() {
      return description;
  }
  
  

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";

  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  

  private String campaignId;
  /**
  * Unique identifier prefixed with `cmp_`.
  * @return campaignId
  **/
  
  @javax.annotation.Nullable
  
  public String getCampaignId() { return campaignId; }

  public void setCampaignId (String campaignId) throws IllegalArgumentException {
    if(!campaignId.matches("^cmp_[a-zA-Z0-9]+$")) {
      throw new IllegalArgumentException("Invalid campaign_id provided");
    }

    this.campaignId = campaignId;
  }
  
  

  public static final String SERIALIZED_NAME_METADATA = "metadata";

  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;
  public Map<String, String> getMetadata() {     
    if (this.metadata == null) {
      this.metadata = new HashMap<String,String>();
    }
    return this.metadata; 
  }

  public static final String SERIALIZED_NAME_DETAILS = "details";

  @SerializedName(SERIALIZED_NAME_DETAILS)
  

  private PostcardDetailsWritable details;
  /**
  * Get details
  * @return details
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "")
  
  public PostcardDetailsWritable getDetails() {
      return details;
  }
  
  

  /**
   * Mailpiece type for the creative
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    POSTCARD("postcard");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";

  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  

  private ResourceTypeEnum resourceType;
  /**
  * Mailpiece type for the creative
  * @return resourceType
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "Mailpiece type for the creative")
  
  public ResourceTypeEnum getResourceType() {
      return resourceType;
  }
  
  

  public static final String SERIALIZED_NAME_FRONT = "front";

  @SerializedName(SERIALIZED_NAME_FRONT)
  

  private String front;
  /**
  * The artwork to use as the front of your postcard. 
  * @return front
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "The artwork to use as the front of your postcard. ")
  
  public String getFront() {
      return front;
  }
  
  

  public static final String SERIALIZED_NAME_BACK = "back";

  @SerializedName(SERIALIZED_NAME_BACK)
  

  private String back;
  /**
  * The artwork to use as the back of your postcard. 
  * @return back
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "The artwork to use as the back of your postcard. ")
  
  public String getBack() {
      return back;
  }
  
  


  /*
  public PostcardRequest from(Object from) {
    
    this.from = from;
    return this;
  }
  */





  /*
  public PostcardRequest description(String description) {
    
    this.description = description;
    return this;
  }
  */


  public void setDescription(String description) {
    this.description = description;
  }



  /*
  public PostcardRequest campaignId(String campaignId) {
    
    this.campaignId = campaignId;
    return this;
  }
  */





  /*
  public PostcardRequest metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }
  */

  public PostcardRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String,String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }



  /*
  public PostcardRequest details(PostcardDetailsWritable details) {
    
    this.details = details;
    return this;
  }
  */


  public void setDetails(PostcardDetailsWritable details) {
    this.details = details;
  }



  /*
  public PostcardRequest resourceType(ResourceTypeEnum resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }
  */


  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }



  /*
  public PostcardRequest front(String front) {
    
    this.front = front;
    return this;
  }
  */


  public void setFront(String front) {
    this.front = front;
  }



  /*
  public PostcardRequest back(String back) {
    
    this.back = back;
    return this;
  }
  */


  public void setBack(String back) {
    this.back = back;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostcardRequest postcardRequest = (PostcardRequest) o;
    return Objects.equals(this.from, postcardRequest.from) &&
        Objects.equals(this.description, postcardRequest.description) &&
        Objects.equals(this.campaignId, postcardRequest.campaignId) &&
        Objects.equals(this.metadata, postcardRequest.metadata) &&
        Objects.equals(this.details, postcardRequest.details) &&
        Objects.equals(this.resourceType, postcardRequest.resourceType) &&
        Objects.equals(this.front, postcardRequest.front) &&
        Objects.equals(this.back, postcardRequest.back);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, description, campaignId, metadata, details, resourceType, front, back);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    front: ").append(toIndentedString(front)).append("\n");
    sb.append("    back: ").append(toIndentedString(back)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

